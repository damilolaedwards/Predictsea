/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common"

interface AttackerContractInterface extends ethers.utils.Interface {
  functions: {
    "UID()": FunctionFragment
    "_predictsea()": FunctionFragment
    "balanceOfContract()": FunctionFragment
    "deposit()": FunctionFragment
    "setUpContract(address)": FunctionFragment
    "stakingFee()": FunctionFragment
    "withdraw()": FunctionFragment
    "withdrawFail()": FunctionFragment
    "withdrawFailed()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "UID", values?: undefined): string
  encodeFunctionData(
    functionFragment: "_predictsea",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "balanceOfContract",
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string
  encodeFunctionData(
    functionFragment: "setUpContract",
    values: [string],
  ): string
  encodeFunctionData(functionFragment: "stakingFee", values?: undefined): string
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string
  encodeFunctionData(
    functionFragment: "withdrawFail",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "withdrawFailed",
    values?: undefined,
  ): string

  decodeFunctionResult(functionFragment: "UID", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "_predictsea", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "balanceOfContract",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "setUpContract",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "stakingFee", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "withdrawFail",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "withdrawFailed",
    data: BytesLike,
  ): Result

  events: {}
}

export class AttackerContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: AttackerContractInterface

  functions: {
    UID(overrides?: CallOverrides): Promise<[BigNumber]>

    _predictsea(overrides?: CallOverrides): Promise<[string]>

    balanceOfContract(overrides?: CallOverrides): Promise<[BigNumber]>

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setUpContract(
      _predictseaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stakingFee(overrides?: CallOverrides): Promise<[BigNumber]>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    withdrawFail(overrides?: CallOverrides): Promise<[boolean]>

    withdrawFailed(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  UID(overrides?: CallOverrides): Promise<BigNumber>

  _predictsea(overrides?: CallOverrides): Promise<string>

  balanceOfContract(overrides?: CallOverrides): Promise<BigNumber>

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setUpContract(
    _predictseaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stakingFee(overrides?: CallOverrides): Promise<BigNumber>

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  withdrawFail(overrides?: CallOverrides): Promise<boolean>

  withdrawFailed(
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    UID(overrides?: CallOverrides): Promise<BigNumber>

    _predictsea(overrides?: CallOverrides): Promise<string>

    balanceOfContract(overrides?: CallOverrides): Promise<BigNumber>

    deposit(overrides?: CallOverrides): Promise<void>

    setUpContract(
      _predictseaContract: string,
      overrides?: CallOverrides,
    ): Promise<void>

    stakingFee(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(overrides?: CallOverrides): Promise<void>

    withdrawFail(overrides?: CallOverrides): Promise<boolean>

    withdrawFailed(overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    UID(overrides?: CallOverrides): Promise<BigNumber>

    _predictsea(overrides?: CallOverrides): Promise<BigNumber>

    balanceOfContract(overrides?: CallOverrides): Promise<BigNumber>

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setUpContract(
      _predictseaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stakingFee(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    withdrawFail(overrides?: CallOverrides): Promise<BigNumber>

    withdrawFailed(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    UID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _predictsea(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOfContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setUpContract(
      _predictseaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    withdrawFail(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawFailed(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
