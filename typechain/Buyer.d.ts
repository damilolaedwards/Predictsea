/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BuyerInterface extends ethers.utils.Interface {
  functions: {
    "Balances(address)": FunctionFragment;
    "BoughtPredictions(address,uint256)": FunctionFragment;
    "Index(uint256)": FunctionFragment;
    "LockedFunds(address)": FunctionFragment;
    "NFT_CONTRACT_ADDRESS()": FunctionFragment;
    "OwnedPredictions(address,uint256)": FunctionFragment;
    "OwnedValidations(address,uint256)": FunctionFragment;
    "PredictionStats(uint256)": FunctionFragment;
    "Predictions(uint256)": FunctionFragment;
    "Purchases(address,uint256)": FunctionFragment;
    "TokenOwner(uint256)": FunctionFragment;
    "User(address)": FunctionFragment;
    "Validations(uint256,uint256)": FunctionFragment;
    "activePool(uint256)": FunctionFragment;
    "getActivePoolLength()": FunctionFragment;
    "getBoughtPredictionsLength(address)": FunctionFragment;
    "getMiningPoolLength()": FunctionFragment;
    "getOwnedPredictionsLength(address)": FunctionFragment;
    "getOwnedValidationsLength(address)": FunctionFragment;
    "lock()": FunctionFragment;
    "locked()": FunctionFragment;
    "minerPercentage()": FunctionFragment;
    "minerStakingFee()": FunctionFragment;
    "miningFee()": FunctionFragment;
    "miningPool(uint256)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "purchasePrediction(uint256,string)": FunctionFragment;
    "transferOwnership()": FunctionFragment;
    "unlock()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "BoughtPredictions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Index", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "LockedFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "NFT_CONTRACT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OwnedPredictions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "OwnedValidations",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "PredictionStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Predictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Purchases",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "User", values: [string]): string;
  encodeFunctionData(
    functionFragment: "Validations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBoughtPredictionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedPredictionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedValidationsLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minerPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minerStakingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "miningFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchasePrediction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BoughtPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Index", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LockedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFT_CONTRACT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OwnedPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OwnedValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PredictionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Purchases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TokenOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "User", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "Validations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoughtPredictionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedPredictionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedValidationsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minerStakingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "miningFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miningPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "IsLocked(bool)": EventFragment;
    "NewOwnerNominated(address)": EventFragment;
    "OwnershipTransferred(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IsLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type IsLockedEvent = TypedEvent<[boolean] & { lock_status: boolean }>;

export type NewOwnerNominatedEvent = TypedEvent<[string] & { nominee: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string] & { newOwner: string }
>;

export class Buyer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BuyerInterface;

  functions: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        lastPushDate: BigNumber;
        releaseDate: BigNumber;
        totalInstances: BigNumber;
      }
    >;

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber;
        tokenId: BigNumber;
        key: string;
      }
    >;

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        validatorCount: number;
        upvoteCount: number;
        downvoteCount: number;
        wonVoteCount: number;
        lostVoteCount: number;
        buyCount: BigNumber;
      }
    >;

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number,
        number,
        boolean,
        number,
        number
      ] & {
        seller: string;
        ipfsHash: string;
        key: string;
        createdAt: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        odd: number;
        price: BigNumber;
        status: number;
        state: number;
        withdrawnEarnings: boolean;
        winningOpeningVote: number;
        winningClosingVote: number;
      }
    >;

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, boolean] & {
        purchased: boolean;
        key: string;
        refunded: boolean;
      }
    >;

    TokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    User(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        profile: string;
        key: string;
        wonCount: BigNumber;
        lostCount: BigNumber;
        totalPredictions: BigNumber;
        totalOdds: BigNumber;
        grossWinnings: BigNumber;
        spot: number;
      }
    >;

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number, number, boolean] & {
        miner: string;
        assigned: boolean;
        opening: number;
        closing: number;
        settled: boolean;
      }
    >;

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActivePoolLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getMiningPoolLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    minerPercentage(overrides?: CallOverrides): Promise<[number]>;

    minerStakingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    miningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchasePrediction(
      _UID: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  BoughtPredictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  LockedFunds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      lastPushDate: BigNumber;
      releaseDate: BigNumber;
      totalInstances: BigNumber;
    }
  >;

  NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  OwnedPredictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  OwnedValidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      id: BigNumber;
      tokenId: BigNumber;
      key: string;
    }
  >;

  PredictionStats(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, BigNumber] & {
      validatorCount: number;
      upvoteCount: number;
      downvoteCount: number;
      wonVoteCount: number;
      lostVoteCount: number;
      buyCount: BigNumber;
    }
  >;

  Predictions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      number,
      number,
      boolean,
      number,
      number
    ] & {
      seller: string;
      ipfsHash: string;
      key: string;
      createdAt: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      odd: number;
      price: BigNumber;
      status: number;
      state: number;
      withdrawnEarnings: boolean;
      winningOpeningVote: number;
      winningClosingVote: number;
    }
  >;

  Purchases(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, boolean] & {
      purchased: boolean;
      key: string;
      refunded: boolean;
    }
  >;

  TokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  User(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      profile: string;
      key: string;
      wonCount: BigNumber;
      lostCount: BigNumber;
      totalPredictions: BigNumber;
      totalOdds: BigNumber;
      grossWinnings: BigNumber;
      spot: number;
    }
  >;

  Validations(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, number, number, boolean] & {
      miner: string;
      assigned: boolean;
      opening: number;
      closing: number;
      settled: boolean;
    }
  >;

  activePool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getActivePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  getBoughtPredictionsLength(
    buyer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMiningPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  getOwnedPredictionsLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwnedValidationsLength(
    miner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  minerPercentage(overrides?: CallOverrides): Promise<number>;

  minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

  miningFee(overrides?: CallOverrides): Promise<BigNumber>;

  miningPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchasePrediction(
    _UID: BigNumberish,
    _key: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        lastPushDate: BigNumber;
        releaseDate: BigNumber;
        totalInstances: BigNumber;
      }
    >;

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber;
        tokenId: BigNumber;
        key: string;
      }
    >;

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        validatorCount: number;
        upvoteCount: number;
        downvoteCount: number;
        wonVoteCount: number;
        lostVoteCount: number;
        buyCount: BigNumber;
      }
    >;

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number,
        number,
        boolean,
        number,
        number
      ] & {
        seller: string;
        ipfsHash: string;
        key: string;
        createdAt: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        odd: number;
        price: BigNumber;
        status: number;
        state: number;
        withdrawnEarnings: boolean;
        winningOpeningVote: number;
        winningClosingVote: number;
      }
    >;

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, boolean] & {
        purchased: boolean;
        key: string;
        refunded: boolean;
      }
    >;

    TokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    User(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        profile: string;
        key: string;
        wonCount: BigNumber;
        lostCount: BigNumber;
        totalPredictions: BigNumber;
        totalOdds: BigNumber;
        grossWinnings: BigNumber;
        spot: number;
      }
    >;

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number, number, boolean] & {
        miner: string;
        assigned: boolean;
        opening: number;
        closing: number;
        settled: boolean;
      }
    >;

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiningPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<void>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    minerPercentage(overrides?: CallOverrides): Promise<number>;

    minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    miningFee(overrides?: CallOverrides): Promise<BigNumber>;

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchasePrediction(
      _UID: BigNumberish,
      _key: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(overrides?: CallOverrides): Promise<void>;

    unlock(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "IsLocked(bool)"(
      lock_status?: null
    ): TypedEventFilter<[boolean], { lock_status: boolean }>;

    IsLocked(
      lock_status?: null
    ): TypedEventFilter<[boolean], { lock_status: boolean }>;

    "NewOwnerNominated(address)"(
      nominee?: null
    ): TypedEventFilter<[string], { nominee: string }>;

    NewOwnerNominated(
      nominee?: null
    ): TypedEventFilter<[string], { nominee: string }>;

    "OwnershipTransferred(address)"(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    OwnershipTransferred(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;
  };

  estimateGas: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    LockedFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    User(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiningPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    minerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    miningFee(overrides?: CallOverrides): Promise<BigNumber>;

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchasePrediction(
      _UID: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Index(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NFT_CONTRACT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    User(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePoolLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMiningPoolLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minerPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minerStakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchasePrediction(
      _UID: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
