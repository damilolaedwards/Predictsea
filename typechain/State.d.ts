/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common"

interface StateInterface extends ethers.utils.Interface {
  functions: {
    "Balances(address)": FunctionFragment
    "BoughtPredictions(address,uint256)": FunctionFragment
    "LockedFunds(address)": FunctionFragment
    "NFT_CONTRACT_ADDRESS()": FunctionFragment
    "OwnedPredictions(address,uint256)": FunctionFragment
    "OwnedValidations(address,uint256)": FunctionFragment
    "Performance(address)": FunctionFragment
    "UserProfile(address)": FunctionFragment
    "UsernameService(bytes32)": FunctionFragment
    "minWonCountForVerification()": FunctionFragment
    "minerPercentage()": FunctionFragment
    "minerStakingFee()": FunctionFragment
    "miningFee()": FunctionFragment
    "sellerStakingFee()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "Balances", values: [string]): string
  encodeFunctionData(
    functionFragment: "BoughtPredictions",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: "LockedFunds", values: [string]): string
  encodeFunctionData(
    functionFragment: "NFT_CONTRACT_ADDRESS",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "OwnedPredictions",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "OwnedValidations",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: "Performance", values: [string]): string
  encodeFunctionData(functionFragment: "UserProfile", values: [string]): string
  encodeFunctionData(
    functionFragment: "UsernameService",
    values: [BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: "minWonCountForVerification",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "minerPercentage",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "minerStakingFee",
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: "miningFee", values?: undefined): string
  encodeFunctionData(
    functionFragment: "sellerStakingFee",
    values?: undefined,
  ): string

  decodeFunctionResult(functionFragment: "Balances", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "BoughtPredictions",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "LockedFunds", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "NFT_CONTRACT_ADDRESS",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "OwnedPredictions",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "OwnedValidations",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "Performance", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "UserProfile", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "UsernameService",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "minWonCountForVerification",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "minerPercentage",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "minerStakingFee",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "miningFee", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "sellerStakingFee",
    data: BytesLike,
  ): Result

  events: {}
}

export class State extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: StateInterface

  functions: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        lastPushDate: BigNumber
        releaseDate: BigNumber
        totalInstances: BigNumber
      }
    >

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<[string]>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { tokenId: BigNumber; UID: BigNumber }>

    Performance(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        recentWinRate: BigNumber
        recentYield: BigNumber
        recentROI: BigNumber
        recentProfitablity: BigNumber
        recentAverageOdds: BigNumber
        lifetimeWinRate: BigNumber
        lifetimeYield: BigNumber
        lifetimeROI: BigNumber
        lifetimeProfitability: BigNumber
        lifetimeAverageOdds: BigNumber
      }
    >

    UserProfile(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        username: string
        wonCount: BigNumber
        lostCount: BigNumber
        totalPredictions: BigNumber
        totalOdds: BigNumber
        grossWinnings: BigNumber
      }
    >

    UsernameService(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>

    minWonCountForVerification(overrides?: CallOverrides): Promise<[number]>

    minerPercentage(overrides?: CallOverrides): Promise<[number]>

    minerStakingFee(overrides?: CallOverrides): Promise<[BigNumber]>

    miningFee(overrides?: CallOverrides): Promise<[BigNumber]>

    sellerStakingFee(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  BoughtPredictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  LockedFunds(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber
      lastPushDate: BigNumber
      releaseDate: BigNumber
      totalInstances: BigNumber
    }
  >

  NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>

  OwnedPredictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  OwnedValidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { tokenId: BigNumber; UID: BigNumber }>

  Performance(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      recentWinRate: BigNumber
      recentYield: BigNumber
      recentROI: BigNumber
      recentProfitablity: BigNumber
      recentAverageOdds: BigNumber
      lifetimeWinRate: BigNumber
      lifetimeYield: BigNumber
      lifetimeROI: BigNumber
      lifetimeProfitability: BigNumber
      lifetimeAverageOdds: BigNumber
    }
  >

  UserProfile(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      username: string
      wonCount: BigNumber
      lostCount: BigNumber
      totalPredictions: BigNumber
      totalOdds: BigNumber
      grossWinnings: BigNumber
    }
  >

  UsernameService(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

  minWonCountForVerification(overrides?: CallOverrides): Promise<number>

  minerPercentage(overrides?: CallOverrides): Promise<number>

  minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

  miningFee(overrides?: CallOverrides): Promise<BigNumber>

  sellerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        lastPushDate: BigNumber
        releaseDate: BigNumber
        totalInstances: BigNumber
      }
    >

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { tokenId: BigNumber; UID: BigNumber }>

    Performance(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        recentWinRate: BigNumber
        recentYield: BigNumber
        recentROI: BigNumber
        recentProfitablity: BigNumber
        recentAverageOdds: BigNumber
        lifetimeWinRate: BigNumber
        lifetimeYield: BigNumber
        lifetimeROI: BigNumber
        lifetimeProfitability: BigNumber
        lifetimeAverageOdds: BigNumber
      }
    >

    UserProfile(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        username: string
        wonCount: BigNumber
        lostCount: BigNumber
        totalPredictions: BigNumber
        totalOdds: BigNumber
        grossWinnings: BigNumber
      }
    >

    UsernameService(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

    minWonCountForVerification(overrides?: CallOverrides): Promise<number>

    minerPercentage(overrides?: CallOverrides): Promise<number>

    minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

    miningFee(overrides?: CallOverrides): Promise<BigNumber>

    sellerStakingFee(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    LockedFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    Performance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    UserProfile(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    UsernameService(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    minWonCountForVerification(overrides?: CallOverrides): Promise<BigNumber>

    minerPercentage(overrides?: CallOverrides): Promise<BigNumber>

    minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

    miningFee(overrides?: CallOverrides): Promise<BigNumber>

    sellerStakingFee(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    Balances(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    NFT_CONTRACT_ADDRESS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    Performance(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    UserProfile(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    UsernameService(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    minWonCountForVerification(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    minerPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minerStakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    miningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sellerStakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
