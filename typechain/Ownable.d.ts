/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common"

interface OwnableInterface extends ethers.utils.Interface {
  functions: {
    "lock()": FunctionFragment
    "locked()": FunctionFragment
    "nominateNewOwner(address)": FunctionFragment
    "nominatedOwner()": FunctionFragment
    "owner()": FunctionFragment
    "transferOwnership()": FunctionFragment
    "unlock()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "lock", values?: undefined): string
  encodeFunctionData(functionFragment: "locked", values?: undefined): string
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string

  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result

  events: {
    "IsLocked(bool)": EventFragment
    "NewOwnerNominated(address)": EventFragment
    "OwnershipTransferred(address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "IsLocked"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NewOwnerNominated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
}

export type IsLockedEvent = TypedEvent<[boolean] & { lock_status: boolean }>

export type NewOwnerNominatedEvent = TypedEvent<[string] & { nominee: string }>

export type OwnershipTransferredEvent = TypedEvent<
  [string] & { newOwner: string }
>

export class Ownable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: OwnableInterface

  functions: {
    lock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    locked(overrides?: CallOverrides): Promise<[boolean]>

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  lock(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  locked(overrides?: CallOverrides): Promise<boolean>

  nominateNewOwner(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  nominatedOwner(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    lock(overrides?: CallOverrides): Promise<void>

    locked(overrides?: CallOverrides): Promise<boolean>

    nominateNewOwner(_address: string, overrides?: CallOverrides): Promise<void>

    nominatedOwner(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    transferOwnership(overrides?: CallOverrides): Promise<void>

    unlock(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "IsLocked(bool)"(
      lock_status?: null,
    ): TypedEventFilter<[boolean], { lock_status: boolean }>

    IsLocked(
      lock_status?: null,
    ): TypedEventFilter<[boolean], { lock_status: boolean }>

    "NewOwnerNominated(address)"(
      nominee?: null,
    ): TypedEventFilter<[string], { nominee: string }>

    NewOwnerNominated(
      nominee?: null,
    ): TypedEventFilter<[string], { nominee: string }>

    "OwnershipTransferred(address)"(
      newOwner?: null,
    ): TypedEventFilter<[string], { newOwner: string }>

    OwnershipTransferred(
      newOwner?: null,
    ): TypedEventFilter<[string], { newOwner: string }>
  }

  estimateGas: {
    lock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    locked(overrides?: CallOverrides): Promise<BigNumber>

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    lock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
