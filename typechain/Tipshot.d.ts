/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common"

interface TipshotInterface extends ethers.utils.Interface {
  functions: {
    "Balances(address)": FunctionFragment
    "BoughtPredictions(address,uint256)": FunctionFragment
    "Index(uint256)": FunctionFragment
    "LockedFunds(address)": FunctionFragment
    "NFT_CONTRACT_ADDRESS()": FunctionFragment
    "OwnedPredictions(address,uint256)": FunctionFragment
    "OwnedValidations(address,uint256)": FunctionFragment
    "PredictionStats(uint256)": FunctionFragment
    "Predictions(uint256)": FunctionFragment
    "Purchases(address,uint256)": FunctionFragment
    "TokenOwner(uint256)": FunctionFragment
    "User(address)": FunctionFragment
    "Validations(uint256,uint256)": FunctionFragment
    "activePool(uint256)": FunctionFragment
    "addProfile(string,string)": FunctionFragment
    "createPrediction(string,string,uint256,uint256,uint16,uint256)": FunctionFragment
    "dummyList(address,uint256)": FunctionFragment
    "dummyValidations(address,uint256)": FunctionFragment
    "freeTipsQuota()": FunctionFragment
    "getActivePoolLength()": FunctionFragment
    "getBoughtPredictionsLength(address)": FunctionFragment
    "getMiningPoolLength()": FunctionFragment
    "getOwnedPredictionsLength(address)": FunctionFragment
    "getOwnedValidationsLength(address)": FunctionFragment
    "getRecentPrediction(address,uint8)": FunctionFragment
    "lock()": FunctionFragment
    "locked()": FunctionFragment
    "minerPercentage()": FunctionFragment
    "minerStakingFee()": FunctionFragment
    "miningFee()": FunctionFragment
    "miningPool(uint256)": FunctionFragment
    "nominateNewOwner(address)": FunctionFragment
    "nominatedOwner()": FunctionFragment
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment
    "owner()": FunctionFragment
    "purchasePrediction(uint256,string)": FunctionFragment
    "refundBuyer(uint256)": FunctionFragment
    "requestValidation(uint256,string)": FunctionFragment
    "setFreeTipsQuota(uint8)": FunctionFragment
    "setNftAddress(address)": FunctionFragment
    "setVariables(uint256,uint256,uint32)": FunctionFragment
    "settleMiner(uint256,uint256)": FunctionFragment
    "settleSeller(uint256)": FunctionFragment
    "submitClosingVote(uint256,uint256,uint8)": FunctionFragment
    "submitOpeningVote(uint256,uint256,uint8)": FunctionFragment
    "transferLockedFunds(uint256)": FunctionFragment
    "transferOwnership()": FunctionFragment
    "unlock()": FunctionFragment
    "updatePrediction(uint256,string,string,uint256,uint256,uint16,uint256)": FunctionFragment
    "usedFreeQuota()": FunctionFragment
    "withdrawFunds(uint256)": FunctionFragment
    "withdrawMinerNftandStakingFee(uint256,uint256)": FunctionFragment
    "withdrawPrediction(uint256)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "Balances", values: [string]): string
  encodeFunctionData(
    functionFragment: "BoughtPredictions",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: "Index", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "LockedFunds", values: [string]): string
  encodeFunctionData(
    functionFragment: "NFT_CONTRACT_ADDRESS",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "OwnedPredictions",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "OwnedValidations",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "PredictionStats",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "Predictions",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "Purchases",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "TokenOwner",
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: "User", values: [string]): string
  encodeFunctionData(
    functionFragment: "Validations",
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "activePool",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "addProfile",
    values: [string, string],
  ): string
  encodeFunctionData(
    functionFragment: "createPrediction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: "dummyList",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "dummyValidations",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "freeTipsQuota",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "getActivePoolLength",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "getBoughtPredictionsLength",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "getMiningPoolLength",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "getOwnedPredictionsLength",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "getOwnedValidationsLength",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "getRecentPrediction",
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: "lock", values?: undefined): string
  encodeFunctionData(functionFragment: "locked", values?: undefined): string
  encodeFunctionData(
    functionFragment: "minerPercentage",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "minerStakingFee",
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: "miningFee", values?: undefined): string
  encodeFunctionData(
    functionFragment: "miningPool",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(
    functionFragment: "purchasePrediction",
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(
    functionFragment: "refundBuyer",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "requestValidation",
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(
    functionFragment: "setFreeTipsQuota",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "setNftAddress",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "setVariables",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "settleMiner",
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "settleSeller",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "submitClosingVote",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "submitOpeningVote",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "transferLockedFunds",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string
  encodeFunctionData(
    functionFragment: "updatePrediction",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string
  encodeFunctionData(
    functionFragment: "usedFreeQuota",
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "withdrawMinerNftandStakingFee",
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: "withdrawPrediction",
    values: [BigNumberish],
  ): string

  decodeFunctionResult(functionFragment: "Balances", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "BoughtPredictions",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "Index", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "LockedFunds", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "NFT_CONTRACT_ADDRESS",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "OwnedPredictions",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "OwnedValidations",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "PredictionStats",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "Predictions", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "Purchases", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "TokenOwner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "User", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "Validations", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "addProfile", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "createPrediction",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "dummyList", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "dummyValidations",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "freeTipsQuota",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "getActivePoolLength",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "getBoughtPredictionsLength",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "getMiningPoolLength",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "getOwnedPredictionsLength",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "getOwnedValidationsLength",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "getRecentPrediction",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "minerPercentage",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "minerStakingFee",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "miningFee", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "miningPool", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "purchasePrediction",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "refundBuyer", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "requestValidation",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "setFreeTipsQuota",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "setNftAddress",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "setVariables",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "settleMiner", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "settleSeller",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "submitClosingVote",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "submitOpeningVote",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "transferLockedFunds",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "updatePrediction",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "usedFreeQuota",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "withdrawMinerNftandStakingFee",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "withdrawPrediction",
    data: BytesLike,
  ): Result

  events: {
    "BuyerRefunded(address,uint256,uint256)": EventFragment
    "ClosingVoteSubmitted(uint256,uint256,uint8)": EventFragment
    "DepositCreated(address,uint256)": EventFragment
    "IsLocked(bool)": EventFragment
    "LockedFundsTransferred(address,uint256,uint256)": EventFragment
    "MinerNFTAndStakingFeeWithdrawn(address,uint256,uint256)": EventFragment
    "MinerSettled(address,uint256,uint256,uint256,bool)": EventFragment
    "NewOwnerNominated(address)": EventFragment
    "OpeningVoteSubmitted(uint256,uint256,uint8,uint8)": EventFragment
    "OwnershipTransferred(address)": EventFragment
    "PredictionCreated(address,uint256,string,string)": EventFragment
    "PredictionPurchased(address,uint256)": EventFragment
    "PredictionUpdated(address,uint256,string,string)": EventFragment
    "PredictionWithdrawn(uint256,address)": EventFragment
    "SellerSettled(address,uint256,uint256)": EventFragment
    "ValidationAssigned(address,uint256,uint256)": EventFragment
    "VariableUpdated(uint256,uint256,uint32)": EventFragment
    "Withdrawal(address,uint256,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "BuyerRefunded"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ClosingVoteSubmitted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "DepositCreated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "IsLocked"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LockedFundsTransferred"): EventFragment
  getEvent(
    nameOrSignatureOrTopic: "MinerNFTAndStakingFeeWithdrawn",
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: "MinerSettled"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NewOwnerNominated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OpeningVoteSubmitted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PredictionCreated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PredictionPurchased"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PredictionUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PredictionWithdrawn"): EventFragment
  getEvent(nameOrSignatureOrTopic: "SellerSettled"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ValidationAssigned"): EventFragment
  getEvent(nameOrSignatureOrTopic: "VariableUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment
}

export type BuyerRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string
    id: BigNumber
    price: BigNumber
  }
>

export type ClosingVoteSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, number] & {
    id: BigNumber
    tokenId: BigNumber
    option: number
  }
>

export type DepositCreatedEvent = TypedEvent<
  [string, BigNumber] & { sender: string; value: BigNumber }
>

export type IsLockedEvent = TypedEvent<[boolean] & { lock_status: boolean }>

export type LockedFundsTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string
    amount: BigNumber
    lockedBalance: BigNumber
  }
>

export type MinerNFTAndStakingFeeWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    seller: string
    id: BigNumber
    tokenId: BigNumber
  }
>

export type MinerSettledEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean] & {
    miner: string
    id: BigNumber
    tokenId: BigNumber
    minerEarnings: BigNumber
    refunded: boolean
  }
>

export type NewOwnerNominatedEvent = TypedEvent<[string] & { nominee: string }>

export type OpeningVoteSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, number, number] & {
    id: BigNumber
    tokenId: BigNumber
    option: number
    state: number
  }
>

export type OwnershipTransferredEvent = TypedEvent<
  [string] & { newOwner: string }
>

export type PredictionCreatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    sender: string
    id: BigNumber
    ipfsHash: string
    key: string
  }
>

export type PredictionPurchasedEvent = TypedEvent<
  [string, BigNumber] & { buyer: string; id: BigNumber }
>

export type PredictionUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    sender: string
    id: BigNumber
    ipfsHash: string
    key: string
  }
>

export type PredictionWithdrawnEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; seller: string }
>

export type SellerSettledEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    seller: string
    id: BigNumber
    sellerEarnings: BigNumber
  }
>

export type ValidationAssignedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    miner: string
    id: BigNumber
    tokenId: BigNumber
  }
>

export type VariableUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, number] & {
    miningFee: BigNumber
    minerStakingFee: BigNumber
    minerPercentage: number
  }
>

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    recipient: string
    amount: BigNumber
    balance: BigNumber
  }
>

export class Tipshot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: TipshotInterface

  functions: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        lastPushDate: BigNumber
        releaseDate: BigNumber
        totalInstances: BigNumber
      }
    >

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<[string]>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber
        tokenId: BigNumber
        key: string
      }
    >

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        validatorCount: number
        upvoteCount: number
        downvoteCount: number
        wonVoteCount: number
        lostVoteCount: number
        buyCount: BigNumber
      }
    >

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number,
        number,
        boolean,
        number,
        number,
      ] & {
        seller: string
        ipfsHash: string
        key: string
        createdAt: BigNumber
        startTime: BigNumber
        endTime: BigNumber
        odd: number
        price: BigNumber
        status: number
        state: number
        withdrawnEarnings: boolean
        winningOpeningVote: number
        winningClosingVote: number
      }
    >

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, string, boolean] & {
        purchased: boolean
        key: string
        refunded: boolean
      }
    >

    TokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    User(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, number] & {
        profile: string
        key: string
        wonCount: BigNumber
        lostCount: BigNumber
        totalPredictions: BigNumber
        spot: number
      }
    >

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, boolean, number, number, boolean] & {
        miner: string
        assigned: boolean
        opening: number
        closing: number
        settled: boolean
      }
    >

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    addProfile(
      _profileData: string,
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    createPrediction(
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    dummyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    dummyValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber
        tokenId: BigNumber
        key: string
      }
    >

    freeTipsQuota(overrides?: CallOverrides): Promise<[number]>

    getActivePoolLength(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { length: BigNumber }>

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { length: BigNumber }>

    getMiningPoolLength(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { length: BigNumber }>

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { length: BigNumber }>

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { length: BigNumber }>

    getRecentPrediction(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    lock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    locked(overrides?: CallOverrides): Promise<[boolean]>

    minerPercentage(overrides?: CallOverrides): Promise<[number]>

    minerStakingFee(overrides?: CallOverrides): Promise<[BigNumber]>

    miningFee(overrides?: CallOverrides): Promise<[BigNumber]>

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    purchasePrediction(
      _id: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    refundBuyer(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    requestValidation(
      _tokenId: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setFreeTipsQuota(
      _quota: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setNftAddress(
      _NftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setVariables(
      _miningFee: BigNumberish,
      _minerStakingFee: BigNumberish,
      _minerPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    settleMiner(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    settleSeller(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    submitClosingVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    submitOpeningVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferLockedFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    updatePrediction(
      _id: BigNumberish,
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    usedFreeQuota(overrides?: CallOverrides): Promise<[number]>

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    withdrawMinerNftandStakingFee(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    withdrawPrediction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  BoughtPredictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  LockedFunds(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber
      lastPushDate: BigNumber
      releaseDate: BigNumber
      totalInstances: BigNumber
    }
  >

  NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>

  OwnedPredictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  OwnedValidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, string] & {
      id: BigNumber
      tokenId: BigNumber
      key: string
    }
  >

  PredictionStats(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, number, number, number, BigNumber] & {
      validatorCount: number
      upvoteCount: number
      downvoteCount: number
      wonVoteCount: number
      lostVoteCount: number
      buyCount: BigNumber
    }
  >

  Predictions(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      number,
      number,
      boolean,
      number,
      number,
    ] & {
      seller: string
      ipfsHash: string
      key: string
      createdAt: BigNumber
      startTime: BigNumber
      endTime: BigNumber
      odd: number
      price: BigNumber
      status: number
      state: number
      withdrawnEarnings: boolean
      winningOpeningVote: number
      winningClosingVote: number
    }
  >

  Purchases(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, string, boolean] & {
      purchased: boolean
      key: string
      refunded: boolean
    }
  >

  TokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  User(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, number] & {
      profile: string
      key: string
      wonCount: BigNumber
      lostCount: BigNumber
      totalPredictions: BigNumber
      spot: number
    }
  >

  Validations(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, boolean, number, number, boolean] & {
      miner: string
      assigned: boolean
      opening: number
      closing: number
      settled: boolean
    }
  >

  activePool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  addProfile(
    _profileData: string,
    _key: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  createPrediction(
    _ipfsHash: string,
    _key: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _odd: BigNumberish,
    _price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  dummyList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  dummyValidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, string] & {
      id: BigNumber
      tokenId: BigNumber
      key: string
    }
  >

  freeTipsQuota(overrides?: CallOverrides): Promise<number>

  getActivePoolLength(overrides?: CallOverrides): Promise<BigNumber>

  getBoughtPredictionsLength(
    buyer: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getMiningPoolLength(overrides?: CallOverrides): Promise<BigNumber>

  getOwnedPredictionsLength(
    seller: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getOwnedValidationsLength(
    miner: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getRecentPrediction(
    seller: string,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  lock(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  locked(overrides?: CallOverrides): Promise<boolean>

  minerPercentage(overrides?: CallOverrides): Promise<number>

  minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

  miningFee(overrides?: CallOverrides): Promise<BigNumber>

  miningPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  nominateNewOwner(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  nominatedOwner(overrides?: CallOverrides): Promise<string>

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  purchasePrediction(
    _id: BigNumberish,
    _key: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  refundBuyer(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  requestValidation(
    _tokenId: BigNumberish,
    _key: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setFreeTipsQuota(
    _quota: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setNftAddress(
    _NftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setVariables(
    _miningFee: BigNumberish,
    _minerStakingFee: BigNumberish,
    _minerPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  settleMiner(
    _id: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  settleSeller(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  submitClosingVote(
    _id: BigNumberish,
    _tokenId: BigNumberish,
    _option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  submitOpeningVote(
    _id: BigNumberish,
    _tokenId: BigNumberish,
    _option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferLockedFunds(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  updatePrediction(
    _id: BigNumberish,
    _ipfsHash: string,
    _key: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _odd: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  usedFreeQuota(overrides?: CallOverrides): Promise<number>

  withdrawFunds(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  withdrawMinerNftandStakingFee(
    _id: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  withdrawPrediction(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        lastPushDate: BigNumber
        releaseDate: BigNumber
        totalInstances: BigNumber
      }
    >

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber
        tokenId: BigNumber
        key: string
      }
    >

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        validatorCount: number
        upvoteCount: number
        downvoteCount: number
        wonVoteCount: number
        lostVoteCount: number
        buyCount: BigNumber
      }
    >

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number,
        number,
        boolean,
        number,
        number,
      ] & {
        seller: string
        ipfsHash: string
        key: string
        createdAt: BigNumber
        startTime: BigNumber
        endTime: BigNumber
        odd: number
        price: BigNumber
        status: number
        state: number
        withdrawnEarnings: boolean
        winningOpeningVote: number
        winningClosingVote: number
      }
    >

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, string, boolean] & {
        purchased: boolean
        key: string
        refunded: boolean
      }
    >

    TokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    User(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, number] & {
        profile: string
        key: string
        wonCount: BigNumber
        lostCount: BigNumber
        totalPredictions: BigNumber
        spot: number
      }
    >

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, boolean, number, number, boolean] & {
        miner: string
        assigned: boolean
        opening: number
        closing: number
        settled: boolean
      }
    >

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    addProfile(
      _profileData: string,
      _key: string,
      overrides?: CallOverrides,
    ): Promise<void>

    createPrediction(
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    dummyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    dummyValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber
        tokenId: BigNumber
        key: string
      }
    >

    freeTipsQuota(overrides?: CallOverrides): Promise<number>

    getActivePoolLength(overrides?: CallOverrides): Promise<BigNumber>

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMiningPoolLength(overrides?: CallOverrides): Promise<BigNumber>

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getRecentPrediction(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    lock(overrides?: CallOverrides): Promise<void>

    locked(overrides?: CallOverrides): Promise<boolean>

    minerPercentage(overrides?: CallOverrides): Promise<number>

    minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

    miningFee(overrides?: CallOverrides): Promise<BigNumber>

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    nominateNewOwner(_address: string, overrides?: CallOverrides): Promise<void>

    nominatedOwner(overrides?: CallOverrides): Promise<string>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    purchasePrediction(
      _id: BigNumberish,
      _key: string,
      overrides?: CallOverrides,
    ): Promise<void>

    refundBuyer(_id: BigNumberish, overrides?: CallOverrides): Promise<void>

    requestValidation(
      _tokenId: BigNumberish,
      _key: string,
      overrides?: CallOverrides,
    ): Promise<void>

    setFreeTipsQuota(
      _quota: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setNftAddress(_NftAddress: string, overrides?: CallOverrides): Promise<void>

    setVariables(
      _miningFee: BigNumberish,
      _minerStakingFee: BigNumberish,
      _minerPercentage: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    settleMiner(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    settleSeller(_id: BigNumberish, overrides?: CallOverrides): Promise<void>

    submitClosingVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    submitOpeningVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    transferLockedFunds(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    transferOwnership(overrides?: CallOverrides): Promise<void>

    unlock(overrides?: CallOverrides): Promise<void>

    updatePrediction(
      _id: BigNumberish,
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    usedFreeQuota(overrides?: CallOverrides): Promise<number>

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    withdrawMinerNftandStakingFee(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    withdrawPrediction(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    "BuyerRefunded(address,uint256,uint256)"(
      buyer?: string | null,
      id?: BigNumberish | null,
      price?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; id: BigNumber; price: BigNumber }
    >

    BuyerRefunded(
      buyer?: string | null,
      id?: BigNumberish | null,
      price?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; id: BigNumber; price: BigNumber }
    >

    "ClosingVoteSubmitted(uint256,uint256,uint8)"(
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      option?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { id: BigNumber; tokenId: BigNumber; option: number }
    >

    ClosingVoteSubmitted(
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      option?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { id: BigNumber; tokenId: BigNumber; option: number }
    >

    "DepositCreated(address,uint256)"(
      sender?: null,
      value?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >

    DepositCreated(
      sender?: null,
      value?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >

    "IsLocked(bool)"(
      lock_status?: null,
    ): TypedEventFilter<[boolean], { lock_status: boolean }>

    IsLocked(
      lock_status?: null,
    ): TypedEventFilter<[boolean], { lock_status: boolean }>

    "LockedFundsTransferred(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      lockedBalance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; lockedBalance: BigNumber }
    >

    LockedFundsTransferred(
      user?: string | null,
      amount?: null,
      lockedBalance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; lockedBalance: BigNumber }
    >

    "MinerNFTAndStakingFeeWithdrawn(address,uint256,uint256)"(
      seller?: string | null,
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { seller: string; id: BigNumber; tokenId: BigNumber }
    >

    MinerNFTAndStakingFeeWithdrawn(
      seller?: string | null,
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { seller: string; id: BigNumber; tokenId: BigNumber }
    >

    "MinerSettled(address,uint256,uint256,uint256,bool)"(
      miner?: string | null,
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      minerEarnings?: null,
      refunded?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, boolean],
      {
        miner: string
        id: BigNumber
        tokenId: BigNumber
        minerEarnings: BigNumber
        refunded: boolean
      }
    >

    MinerSettled(
      miner?: string | null,
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      minerEarnings?: null,
      refunded?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, boolean],
      {
        miner: string
        id: BigNumber
        tokenId: BigNumber
        minerEarnings: BigNumber
        refunded: boolean
      }
    >

    "NewOwnerNominated(address)"(
      nominee?: null,
    ): TypedEventFilter<[string], { nominee: string }>

    NewOwnerNominated(
      nominee?: null,
    ): TypedEventFilter<[string], { nominee: string }>

    "OpeningVoteSubmitted(uint256,uint256,uint8,uint8)"(
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      option?: null,
      state?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, number, number],
      { id: BigNumber; tokenId: BigNumber; option: number; state: number }
    >

    OpeningVoteSubmitted(
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      option?: null,
      state?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, number, number],
      { id: BigNumber; tokenId: BigNumber; option: number; state: number }
    >

    "OwnershipTransferred(address)"(
      newOwner?: null,
    ): TypedEventFilter<[string], { newOwner: string }>

    OwnershipTransferred(
      newOwner?: null,
    ): TypedEventFilter<[string], { newOwner: string }>

    "PredictionCreated(address,uint256,string,string)"(
      sender?: string | null,
      id?: BigNumberish | null,
      ipfsHash?: null,
      key?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { sender: string; id: BigNumber; ipfsHash: string; key: string }
    >

    PredictionCreated(
      sender?: string | null,
      id?: BigNumberish | null,
      ipfsHash?: null,
      key?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { sender: string; id: BigNumber; ipfsHash: string; key: string }
    >

    "PredictionPurchased(address,uint256)"(
      buyer?: string | null,
      id?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { buyer: string; id: BigNumber }>

    PredictionPurchased(
      buyer?: string | null,
      id?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { buyer: string; id: BigNumber }>

    "PredictionUpdated(address,uint256,string,string)"(
      sender?: string | null,
      id?: BigNumberish | null,
      ipfsHash?: null,
      key?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { sender: string; id: BigNumber; ipfsHash: string; key: string }
    >

    PredictionUpdated(
      sender?: string | null,
      id?: BigNumberish | null,
      ipfsHash?: null,
      key?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { sender: string; id: BigNumber; ipfsHash: string; key: string }
    >

    "PredictionWithdrawn(uint256,address)"(
      id?: BigNumberish | null,
      seller?: null,
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; seller: string }>

    PredictionWithdrawn(
      id?: BigNumberish | null,
      seller?: null,
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; seller: string }>

    "SellerSettled(address,uint256,uint256)"(
      seller?: string | null,
      id?: BigNumberish | null,
      sellerEarnings?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { seller: string; id: BigNumber; sellerEarnings: BigNumber }
    >

    SellerSettled(
      seller?: string | null,
      id?: BigNumberish | null,
      sellerEarnings?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { seller: string; id: BigNumber; sellerEarnings: BigNumber }
    >

    "ValidationAssigned(address,uint256,uint256)"(
      miner?: null,
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { miner: string; id: BigNumber; tokenId: BigNumber }
    >

    ValidationAssigned(
      miner?: null,
      id?: BigNumberish | null,
      tokenId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { miner: string; id: BigNumber; tokenId: BigNumber }
    >

    "VariableUpdated(uint256,uint256,uint32)"(
      miningFee?: null,
      minerStakingFee?: null,
      minerPercentage?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      {
        miningFee: BigNumber
        minerStakingFee: BigNumber
        minerPercentage: number
      }
    >

    VariableUpdated(
      miningFee?: null,
      minerStakingFee?: null,
      minerPercentage?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      {
        miningFee: BigNumber
        minerStakingFee: BigNumber
        minerPercentage: number
      }
    >

    "Withdrawal(address,uint256,uint256)"(
      recipient?: string | null,
      amount?: null,
      balance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient: string; amount: BigNumber; balance: BigNumber }
    >

    Withdrawal(
      recipient?: string | null,
      amount?: null,
      balance?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient: string; amount: BigNumber; balance: BigNumber }
    >
  }

  estimateGas: {
    Balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    Index(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    LockedFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    NFT_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    TokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    User(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    addProfile(
      _profileData: string,
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    createPrediction(
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    dummyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    dummyValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    freeTipsQuota(overrides?: CallOverrides): Promise<BigNumber>

    getActivePoolLength(overrides?: CallOverrides): Promise<BigNumber>

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMiningPoolLength(overrides?: CallOverrides): Promise<BigNumber>

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getRecentPrediction(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    lock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    locked(overrides?: CallOverrides): Promise<BigNumber>

    minerPercentage(overrides?: CallOverrides): Promise<BigNumber>

    minerStakingFee(overrides?: CallOverrides): Promise<BigNumber>

    miningFee(overrides?: CallOverrides): Promise<BigNumber>

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    purchasePrediction(
      _id: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    refundBuyer(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    requestValidation(
      _tokenId: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setFreeTipsQuota(
      _quota: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setNftAddress(
      _NftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setVariables(
      _miningFee: BigNumberish,
      _minerStakingFee: BigNumberish,
      _minerPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    settleMiner(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    settleSeller(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    submitClosingVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    submitOpeningVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferLockedFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    updatePrediction(
      _id: BigNumberish,
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    usedFreeQuota(overrides?: CallOverrides): Promise<BigNumber>

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    withdrawMinerNftandStakingFee(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    withdrawPrediction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    Balances(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    BoughtPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    Index(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    LockedFunds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    NFT_CONTRACT_ADDRESS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    OwnedPredictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    OwnedValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    PredictionStats(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    Predictions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    Purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    TokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    User(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    Validations(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    activePool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    addProfile(
      _profileData: string,
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    createPrediction(
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    dummyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    dummyValidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    freeTipsQuota(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getActivePoolLength(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getBoughtPredictionsLength(
      buyer: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMiningPoolLength(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getOwnedPredictionsLength(
      seller: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getOwnedValidationsLength(
      miner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getRecentPrediction(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    lock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minerPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minerStakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    miningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    miningPool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    nominateNewOwner(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    purchasePrediction(
      _id: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    refundBuyer(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    requestValidation(
      _tokenId: BigNumberish,
      _key: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setFreeTipsQuota(
      _quota: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setNftAddress(
      _NftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setVariables(
      _miningFee: BigNumberish,
      _minerStakingFee: BigNumberish,
      _minerPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    settleMiner(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    settleSeller(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    submitClosingVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    submitOpeningVote(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferLockedFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    updatePrediction(
      _id: BigNumberish,
      _ipfsHash: string,
      _key: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _odd: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    usedFreeQuota(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    withdrawMinerNftandStakingFee(
      _id: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    withdrawPrediction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
